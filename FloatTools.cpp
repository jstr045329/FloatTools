//----------------------------------------------------------------------------------------------------------------------
//                                                    Float Tools 
//----------------------------------------------------------------------------------------------------------------------
#include <cmath>
#include <stdlib.h>
#include <iostream>

namespace FloatTools {

    //------------------------------------------------------------------------------------------------------------------
    //                                             Approximate Equality
    //
    // If you've ever tested two floats for equality, you know that x == y will give you an undesirable answer in
    // situations like this:
    //
    //      if (1 == 0.9999999999) {
    //          doStuff();
    //      }
    //
    // Therefore, we define some tolerance tol (which defaults to 1E-9 if not passed in) and check if the difference
    // between the two numbers is less than that. Note that if you pass in a negative value for tol, this function will
    // always return false.
    //
    //------------------------------------------------------------------------------------------------------------------
    bool approx_equal(float x1, float x2, float tol) {
        return (std::abs(x1 - x2) < tol);
    }

    bool approx_equal(float x1, float x2) {
        return approx_equal(x1, x2, 1E-9);
    }

    //------------------------------------------------------------------------------------------------------------------
    //                                             Random Floating Point
    //
    // This function takes the random bits generated by rand() and reinterprets those random bits as a float. As a
    // result you get the full dynamic range of float. This function is also division free, which means you do not have
    // to check for division by zero, division by almost zero, etc.
    //------------------------------------------------------------------------------------------------------------------
    float rand_float() {
        int x = rand();
        int exponent_bits = 0x7f800000;

        // Check for invalid symbols
        // The only invalid condition we check for is the exponent bits being all 1's, because that signals Not a
        // Number. This function allows subnormal numbers and -0.
        while ((x & exponent_bits) == exponent_bits) {
            x = rand();
        }
        float *y = (float*) &x;
        return *y;
    }
}
